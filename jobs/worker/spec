# vim: ft=yaml
---
name: worker

description: >
  The 'worker' nodes are what actually run Concourse workloads (builds,
  resource checking, etc). They register with Concourse via the SSH worker
  gateway running on the 'web' nodes.

templates:
  ctl.erb: bin/ctl
  drain.erb: bin/drain
  pre_start.erb: bin/pre_start
  concourse_start.erb: bin/concourse_start
  concourse_stop.erb: bin/concourse_stop
  env.sh.erb: config/env.sh
  concourse.service: config/concourse.service
  worker_gateway_host_key.pub.erb: config/worker_gateway_host_key.pub
  garden.ini.erb: config/garden.ini

packages:
- concourse
- btrfs_tools

consumes:
- name: web
  type: web
  optional: true

properties:
  log_level:
    env: CONCOURSE_LOG_LEVEL
    description: |
      The log level for the worker. When set to debug, you'll see a lot more
      information.
    default: info

  team:
    env: CONCOURSE_TEAM
    description: |
      Register the worker for a single team.

      If not specified, the worker will be shared across all teams.

  tags:
    env: CONCOURSE_TAG
    description: |
      An array of tags to advertise for each worker.
    example: [special]

  http_proxy_url:
    env: http_proxy
    description: |
      Proxy to use for outgoing http requests from containers.

  https_proxy_url:
    env: https_proxy
    description: |
      Proxy to use for outgoing https requests from containers.

  no_proxy:
    env: no_proxy
    description: |
      A list domains and IPs with optional port for which the proxy should be
      bypassed.
    example: [localhost, 127.0.0.1, example.com, 'domain.com:8080']

  certs_path:
    env: CONCOURSE_CERTS_DIR
    description: |
      A path to a directory on the instance to create the resource certificates
      volume from.
    default: "/etc/ssl/certs"

  drain_timeout:
    description: |
      Maximum wait time in Go duration format (1m = 1 minute) for worker drain
      to be finished. Only applies when worker is getting shutdown.

    default: 1h

  ephemeral:
    env: CONCOURSE_EPHEMERAL
    description: |
      If set, the worker will immediately disappear upon stalling.
    default: false

  sweep_interval:
    env: CONCOURSE_SWEEP_INTERVAL
    description: |
      Interval on which to destroy containers and volumes marked for garbage
      collection.
    default: 30s

  container_sweeper_max_in_flight:
    env: CONCOURSE_CONTAINER_SWEEPER_MAX_IN_FLIGHT
    description: |
      Maximum number of containers which can be swept in parallel.

  volume_sweeper_max_in_flight:
    env: CONCOURSE_VOLUME_SWEEPER_MAX_IN_FLIGHT
    description: |
      Maximum number of volumes which can be swept in parallel.

  external_garden_url:
    env: CONCOURSE_EXTERNAL_GARDEN_URL
    description: |
      API endpoint of an externally managed Garden server to use instead of
      running the embedded Garden server.

  worker_gateway.hosts:
    env: CONCOURSE_TSA_HOST
    description: |
      Addresses (host:port) of TSA servers to register with.

      If not specified, the `web` link is used.

  worker_gateway.host_public_key:
    env_file: CONCOURSE_TSA_PUBLIC_KEY
    description: >
      Public key to verify for the TSA server.

      If not specified, the `web` link is used.
    example: 'ssh-rsa ...'

  worker_gateway.worker_key:
    type: ssh
    env_fields: {private_key: {env_file: CONCOURSE_TSA_WORKER_PRIVATE_KEY}}
    description: |
      SSH key to use when authenticating with the TSA.
    example:
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        ...
        -----END RSA PRIVATE KEY-----
      public_key: 'ssh-rsa ...'

  worker_gateway.rebalance_interval:
    env: CONCOURSE_REBALANCE_INTERVAL
    description: |
      The interval on which the worker will connect to a new SSH gateway and
      drain the old connection. This has the effect of rebalancing the
      forwarded workers across the SSH gateways over time.
    example: 4h

  connection_drain_timeout:
    env: CONCOURSE_CONNECTION_DRAIN_TIMEOUT
    description: |
      Duration after which a worker should give up draining forwarded
      connections on shutdown.
    default: 1h

  baggageclaim.driver:
    env: CONCOURSE_BAGGAGECLAIM_DRIVER
    description: |
      Driver to use for the volume store. One of detect, overlay, btrfs, or naive.
    default: detect

  baggageclaim.bind_ip:
    env: CONCOURSE_BAGGAGECLAIM_BIND_IP
    description: |
      IP on which Baggageclaim should listen for HTTP traffic.
      When p2p is enabled this needs to be set to 0.0.0.0
    default: 127.0.0.1

  baggageclaim.bind_port:
    env: CONCOURSE_BAGGAGECLAIM_BIND_PORT
    description: |
      Port on which Baggageclaim should listen for HTTP traffic.
    default: 7788

  baggageclaim.disable_user_namespaces:
    env: CONCOURSE_BAGGAGECLAIM_DISABLE_USER_NAMESPACES
    description: |
      Disable remapping of user/group IDs in unprivileged volumes.

      For use in combination with 'runtime.type=houdini'.
    default: false

  baggageclaim.p2p.interface_name_pattern:
    env: CONCOURSE_BAGGAGECLAIM_P2P_INTERFACE_NAME_PATTERN
    description: |
      Regex for determining the network interface to use for peer-to-peer
      volume streaming.
    example: eth0

  baggageclaim.p2p.interface_family:
    env: CONCOURSE_BAGGAGECLAIM_P2P_INTERFACE_FAMILY
    description: |
      Interface family to use for peer-to-peer volume streaming.

      Set 4 for IPv4 or 6 for IPv6.
    example: 4

  runtime:
    env: CONCOURSE_RUNTIME
    description: |
      Container runtime for worker. Possible values are "guardian", "containerd", and "houdini".
      Please note that Houdini is insecure and does not run tasks in containers.
    example: guardian

  garden.bin:
    env: CONCOURSE_GARDEN_BIN
    description: |
      Path to a gdn executable (non-absolute names get resolved from $PATH).

  garden.config_ini:
    description: |
      Contents of the Garden configuration. Use to customize the container runtime.
      This may over-ride any other environment variables specified.
      See: https://concourse-ci.org/concourse-worker.html#configuring-gdn-server

  garden.request_timeout:
    env: CONCOURSE_GARDEN_REQUEST_TIMEOUT
    description: |
      How long to wait for requests to Garden to complete, in Go duration format (48h = 48 hours).
      0 means no timeout.
    example: 5m

  garden.deny_networks:
    env: CONCOURSE_GARDEN_DENY_NETWORK
    description: |
      Network ranges to which traffic from containers will be denied.
    example: []

  garden.dns_servers:
    env: CONCOURSE_GARDEN_DNS_SERVER
    description: |
      DNS servers IP addresses to use instead of automatically
      propagating the host's DNS configuration.
    example: []

  garden.allow_host_access:
    env: CONCOURSE_GARDEN_ALLOW_HOST_ACCESS
    description: |
      Allow containers to reach the worker VM's network.

  garden.max_containers:
    env: CONCOURSE_GARDEN_MAX_CONTAINERS
    description: |
      Maximum container capacity to advertise. 0 means no limit. Defaults to 250.

  garden.network_pool:
    env: CONCOURSE_GARDEN_NETWORK_POOL
    description: |
      Network range to use for dynamically allocated container subnets. Defaults to "10.80.0.0/16".

  containerd.bin:
    env: CONCOURSE_CONTAINERD_BIN
    description: |
      Path to a containerd executable (non-absolute names get resolved from $PATH).

  containerd.config:
    env: CONCOURSE_CONTAINERD_CONFIG
    description: |
      Path to a config file to use for the Containerd daemon.

  containerd.dns_proxy_enable:
    env: CONCOURSE_CONTAINERD_DNS_PROXY_ENABLE
    description: |
      Enable a proxy DNS server for Garden. Note: this implicitly turns on container access to host network.

  containerd.mtu:
    env: CONCOURSE_CONTAINERD_MTU
    description: |
      MTU size for container network interfaces. Defaults to the MTU of the interface used for outbound access by the host.

  containerd.external_ip:
    env: CONCOURSE_CONTAINERD_EXTERNAL_IP
    description: |
      IP address to use to reach container's mapped ports. Autodetected if not specified.

  containerd.dns_servers:
    env: CONCOURSE_CONTAINERD_DNS_SERVER
    description: |
      List of DNS server IP addresses to use instead of automatically determined servers.

  containerd.restricted_networks:
    env: CONCOURSE_CONTAINERD_RESTRICTED_NETWORK
    description: |
      List of network ranges to which traffic from containers will be restricted.

  containerd.additional_hosts:
    env: CONCOURSE_CONTAINERD_ADDITIONAL_HOSTS
    description: |
      List of hosts to be added to /etc/hosts file.
      Example:
        - 1.1.1.1 example.com
        - 2.2.2.2 another.example.com

  containerd.allow_host_access:
    env: CONCOURSE_CONTAINERD_ALLOW_HOST_ACCESS
    description: |
      Allows containers to reach host network

  containerd.max_containers:
    env: CONCOURSE_CONTAINERD_MAX_CONTAINERS
    description: |
      Maximum container capacity. 0 means no limit. Defaults to 250.

  containerd.network_pool:
    env: CONCOURSE_CONTAINERD_NETWORK_POOL
    description: |
      Network range to use for dynamically allocated container subnets. Defaults to "10.80.0.0/16".

  containerd.ipv6.enabled:
    env: CONCOURSE_CONTAINERD_V6_ENABLE
    description: |
      Enable IPv6 networking for worker containers

  containerd.ipv6.pool:
    env: CONCOURSE_CONTAINERD_V6_POOL
    description: |
      Network range to use for dynamically allocated container subnets. Defaults to "fd9c:31a6:c759::/64".

  containerd.ipv6.disable_masquerade:
    env: CONCOURSE_CONTAINERD_V6_DISABLE_MASQUERADE
    description: |
      Disable masquerading of container traffic with the worker's address

  containerd.request_timeout:
    env: CONCOURSE_CONTAINERD_REQUEST_TIMEOUT
    description: |
      Time to wait for requests to Containerd to complete. 0 means no timeout.

  containerd.init_bin:
    env: CONCOURSE_CONTAINERD_INIT_BIN
    description: |
      Path to an init executable. For BOSH this defaults to /var/vcap/packages/concourse/bin/init when containerd
      is selected as the runtime.

  containerd.oci_hooks_dir:
    env: CONCOURSE_CONTAINERD_OCI_HOOKS_DIR
    description: |
      Path to the oci hooks dir. By default none is provided.

  containerd.seccomp_profile:
    env: CONCOURSE_CONTAINERD_SECCOMP_PROFILE
    description: |
      Path to a seccomp filter override. By default will use a restrictive default set.

  containerd.cni_bin:
    env: CONCOURSE_CONTAINERD_CNI_PLUGINS_DIR
    description: |
      Path to CNI network plugins. For BOSH this defaults to /var/vcap/packages/concourse/bin when containerd is
      selected as the runtime.

  containerd.privileged_mode:
    env: CONCOURSE_CONTAINERD_PRIVILEGED_MODE
    description: |
      How many privileges privileged containers get. Options are 'full'
      (default), 'fuse-only', 'ignore'. 'full' is equivalent to root on host.
      'ignore' means no extra privileges. 'fuse-only' means enough privileges
      to use fuse-overlayfs.

  debug.bind_ip:
    env: CONCOURSE_DEBUG_BIND_IP
    description: |
      IP address on which to listen for the pprof debugger endpoints.
    default: 127.0.0.1

  debug.bind_port:
    env: CONCOURSE_DEBUG_BIND_PORT
    description: |
      Port on which to listen for the pprof debugger endpoints.
    default: 7776

  healthcheck.bind_ip:
    env: CONCOURSE_HEALTHCHECK_BIND_IP
    description: |
      IP address on which to listen for health checking requests.

  healthcheck.bind_port:
    env: CONCOURSE_HEALTHCHECK_BIND_PORT
    description: |
      Port on which to listen for health checking requests.

  healthcheck.timeout:
    env: CONCOURSE_HEALTHCHECK_TIMEOUT
    description: |
      HTTP timeout for the full duration of health checking.

  tracing.service_name:
    env: CONCOURSE_TRACING_SERVICE_NAME
    description: |
      Service name to attach to traces as metadata.
    example: concourse-web
  tracing.attributes:
    env: CONCOURSE_TRACING_ATTRIBUTE
    description: |
      Attributes to attach to traces as metadata.
    example:
      environment: ci
  tracing.jaeger_endpoint:
    env: CONCOURSE_TRACING_JAEGER_ENDPOINT
    description: |
      jaeger HTTP-based Thrift collector.
    example: http://jaeger:14268/api/traces
  tracing.jaeger_service:
    env: CONCOURSE_TRACING_JAEGER_SERVICE
    description: |
      Name of the service being traced.
    example: web
  tracing.jaeger_tags:
    env: CONCOURSE_TRACING_JAEGER_TAGS
    description: |
      Tags to include in components.
    example: foo:bar,caz:zaz
  tracing.stackdriver_projectid:
    env: CONCOURSE_TRACING_STACKDRIVER_PROJECTID
    description: |
      GCP's Project ID
    example: my-projectid
  tracing.honeycomb_api_key:
    env: CONCOURSE_TRACING_HONEYCOMB_API_KEY
    description: |
      Honeycomb.io API Key.
  tracing.honeycomb_dataset:
    env: CONCOURSE_TRACING_HONEYCOMB_DATASET
    description: |
      Name of dataset.
    example: web
  tracing.otlp_address:
    env: CONCOURSE_TRACING_OTLP_ADDRESS
    description: |
      OTLP address to send traces to.
    example: otel-collector:55860
  tracing.otlp_headers:
    env: CONCOURSE_TRACING_OTLP_HEADER
    description: |
      Headers to attach to each tracing message.
    example:
      lightstep-access-token: mysecrettoken
  tracing.otlp_use_tls:
    env: CONCOURSE_TRACING_OTLP_USE_TLS
    description: |
      Whether to use TLS for the OTLP connection.
