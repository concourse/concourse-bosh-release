# vim: ft=yaml
---
name: worker

description: >
  The 'worker' nodes are what actually run Concourse workloads (builds,
  resource checking, etc). They register with Concourse via the SSH worker
  gateway running on the 'web' nodes.

templates:
  ctl.erb: bin/ctl
  drain.erb: bin/drain
  pre_start.erb: bin/pre_start
  concourse_start.erb: bin/concourse_start
  concourse_stop.erb: bin/concourse_stop
  env.sh.erb: config/env.sh
  concourse.service: config/concourse.service
  worker_gateway_host_key.pub.erb: config/worker_gateway_host_key.pub

packages:
- concourse
- btrfs_tools

consumes:
- name: web
  type: web
  optional: true

properties:
  log_level:
    env: CONCOURSE_LOG_LEVEL
    description: |
      The log level for the worker. When set to debug, you'll see a lot more
      information.
    default: info

  team:
    env: CONCOURSE_TEAM
    description: |
      Register the worker for a single team.

      If not specified, the worker will be shared across all teams.

  tags:
    env: CONCOURSE_TAG
    description: |
      An array of tags to advertise for each worker.
    example: [special]

  http_proxy_url:
    env: http_proxy
    description: |
      Proxy to use for outgoing http requests from containers.

  https_proxy_url:
    env: https_proxy
    description: |
      Proxy to use for outgoing https requests from containers.

  no_proxy:
    env: no_proxy
    description: |
      A list domains and IPs with optional port for which the proxy should be
      bypassed.
    example: [localhost, 127.0.0.1, example.com, 'domain.com:8080']

  certs_path:
    env: CONCOURSE_CERTS_DIR
    description: |
      A path to a directory on the instance to create the resource certificates
      volume from.
    default: "/etc/ssl/certs"

  drain_timeout:
    description: |
      Maximum wait time in Go duration format (1m = 1 minute) for worker drain
      to be finished. Only applies when worker is getting shutdown.

    default: 1h

  ephemeral:
    env: CONCOURSE_EPHEMERAL
    description: |
      If set, the worker will immediately disappear upon stalling.
    default: false

  sweep_interval:
    env: CONCOURSE_SWEEP_INTERVAL
    description: |
      Interval on which to destroy containers and volumes marked for garbage
      collection.
    default: 30s

  container_sweeper_max_in_flight:
    env: CONCOURSE_CONTAINER_SWEEPER_MAX_IN_FLIGHT
    description: |
      Maximum number of containers which can be swept in parallel.

  volume_sweeper_max_in_flight:
    env: CONCOURSE_VOLUME_SWEEPER_MAX_IN_FLIGHT
    description: |
      Maximum number of volumes which can be swept in parallel.

  external_garden_url:
    env: CONCOURSE_EXTERNAL_GARDEN_URL
    description: |
      API endpoint of an externally managed Garden server to use instead of
      running the embedded Garden server.

  worker_gateway.hosts:
    env: CONCOURSE_TSA_HOST
    description: |
      Addresses (host:port) of TSA servers to register with.

      If not specified, the `web` link is used.

  worker_gateway.host_public_key:
    env_file: CONCOURSE_TSA_PUBLIC_KEY
    description: >
      Public key to verify for the TSA server.

      If not specified, the `web` link is used.
    example: 'ssh-rsa ...'

  worker_gateway.worker_key:
    type: ssh
    env_fields: {private_key: {env_file: CONCOURSE_TSA_WORKER_PRIVATE_KEY}}
    description: |
      SSH key to use when authenticating with the TSA.
    example:
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        ...
        -----END RSA PRIVATE KEY-----
      public_key: 'ssh-rsa ...'

  worker_gateway.rebalance_interval:
    env: CONCOURSE_REBALANCE_INTERVAL
    description: |
      The interval on which the worker will connect to a new SSH gateway and
      drain the old connection. This has the effect of rebalancing the
      forwarded workers across the SSH gateways over time.

      If not specified, the worker will not rebalance over time, and instead
      stick with whichever SSH gateway it initially connected to.

  connection_drain_timeout:
    env: CONCOURSE_CONNECTION_DRAIN_TIMEOUT
    description: |
      Duration after which a worker should give up draining forwarded
      connections on shutdown.
    default: 1h

  baggageclaim.driver:
    env: CONCOURSE_BAGGAGECLAIM_DRIVER
    description: |
      Driver to use for the volume store. One of detect, overlay, btrfs, or naive.
    default: detect

  baggageclaim.bind_port:
    env: CONCOURSE_BAGGAGECLAIM_BIND_PORT
    description: |
      Port on which Baggageclaim should listen for HTTP traffic.
    default: 7788

  baggageclaim.disable_user_namespaces:
    env: CONCOURSE_BAGGAGECLAIM_DISABLE_USER_NAMESPACES
    description: |
      Disable remapping of user/group IDs in unprivileged volumes.

      For use in combination with 'garden.use_houdini'.
    default: detect

  garden.use_houdini:
    env: CONCOURSE_GARDEN_USE_HOUDINI
    description: |
      Use the insecure Houdini Garden backend.

      If specified, the other garden.* properties have no effect.

  garden.deny_networks:
    env: CONCOURSE_GARDEN_DENY_NETWORK
    description: |
      Network ranges to which traffic from containers will be denied.
    example: []

  garden.dns_servers:
    env: CONCOURSE_GARDEN_DNS_SERVER
    description: |
      DNS servers IP addresses to use instead of automatically
      propagating the host's DNS configuration.
    example: []

  garden.allow_host_access:
    env: CONCOURSE_GARDEN_ALLOW_HOST_ACCESS
    description: |
      Allow containers to reach the worker VM's network.
    default: false

  garden.max_containers:
    env: CONCOURSE_GARDEN_MAX_CONTAINERS
    description: |
      Maximum container capacity to advertise.
    default: 250

  debug.bind_ip:
    env: CONCOURSE_DEBUG_BIND_IP
    description: |
      IP address on which to listen for the pprof debugger endpoints.
    default: 127.0.0.1

  debug.bind_port:
    env: CONCOURSE_DEBUG_BIND_PORT
    description: |
      Port on which to listen for the pprof debugger endpoints.
    default: 7776

  healthcheck.bind_ip:
    env: CONCOURSE_HEALTHCHECK_BIND_IP
    description: |
      IP address on which to listen for health checking requests.

  healthcheck.bind_port:
    env: CONCOURSE_HEALTHCHECK_BIND_PORT
    description: |
      Port on which to listen for health checking requests.

  healthcheck.timeout:
    env: CONCOURSE_HEALTHCHECK_TIMEOUT
    description: |
      HTTP timeout for the full duration of health checking.
